(ns functional-design\chapter3-5)

(defn memoize [f]
  (let [memo (var {})]
    (fn [& args]
      (or (get (deref memo) args)
          (do
            (set! memo (put (deref memo) args (apply f args)))
            (get (deref memo) args))))))

(declare fib)

(defn fib-w [n]
  (cond
    (< n 1) nil
    (<= n 2) 1
    :else (+ (fib (dec n)) (fib (- n 2)))))

(def fib (memoize fib-w))

(defn fibs [n]
  (map fib (range 1 (inc n))))
